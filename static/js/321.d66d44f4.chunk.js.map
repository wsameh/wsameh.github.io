{"version":3,"file":"static/js/321.d66d44f4.chunk.js","mappings":"0UA4BMA,EAA6B,CAC/BC,KAAM,GACNC,MAAO,GACPC,QAAS,IA8Kb,EA3KkB,WAAO,IAADC,EAAAC,EAAAC,EAGdC,GAAeC,EAAAA,EAAAA,YAAWC,EAAAA,GAGhCC,GAA0CC,EAAAA,EAAAA,WAAkB,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3DI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GAGhCI,GAAWC,EAAAA,EAAAA,MAEjBC,GAA4BP,EAAAA,EAAAA,UAAsBX,GAAcmB,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAAzDE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAkCX,EAAAA,EAAAA,WAAS,GAAMY,GAAAV,EAAAA,EAAAA,GAAAS,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAIxBG,EAAmBC,EAAAA,KAAaC,MAAM,CACxC3B,KAAM0B,EAAAA,KAAaE,SAAS,YAC5B3B,MAAOyB,EAAAA,KAAaE,SAAS,YACxB3B,MAAM,6CACXC,QAASwB,EAAAA,KAAaE,SAAS,YAC1BC,IAAI,EAAG,gDACPC,IAAI,IAAM,0CASnBC,GAA+DC,EAAAA,EAAAA,IAAQ,CACnEC,UAAUC,EAAAA,EAAAA,GAAYT,KADlBU,EAAQJ,EAARI,SAAUC,EAAYL,EAAZK,aAAcC,EAAKN,EAALM,MAAmBC,EAAMP,EAAlBQ,UAAYD,OAInDE,QAAQC,IAAItB,GAEZ,IAAMuB,EAAa,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAiB,IAAAC,EAAAC,EAAAC,EAAAC,EAAAlD,EAAA,OAAA2C,EAAAA,EAAAA,KAAAQ,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAE1ChB,QAAQC,IAAI,sBACZD,QAAQC,IAAkC,QAA/BQ,EAACQ,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,6BAAAA,oBAAAA,6BAAAA,kBAAAA,8BAAAA,mBAAAA,2BAAAA,yEAAYC,0BAAkB,IAAAT,OAAA,EAA9BA,EAAgCU,YAC5CnB,QAAQC,IAAkC,QAA/BS,EAACO,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,6BAAAA,oBAAAA,6BAAAA,kBAAAA,8BAAAA,mBAAAA,2BAAAA,yEAAYG,0BAAkB,IAAAV,OAAA,EAA9BA,EAAgCS,YAC5CnB,QAAQC,IAAmC,QAAhCU,EAACM,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,6BAAAA,oBAAAA,6BAAAA,kBAAAA,8BAAAA,mBAAAA,2BAAAA,yEAAYI,2BAAmB,IAAAV,OAAA,EAA/BA,EAAiCQ,YAEvCP,EAAOU,SAASC,cAAc,QAC9B7D,EAAU,CACZ8D,UAAWhB,EAAKhD,KAChBiE,WAAYjB,EAAK/C,MACjBiE,aAAclB,EAAK9C,SAEvBiE,OAAOC,QAAQlE,GAASmE,SAAQ,SAAAC,GAC5B,IAAIC,EAAQT,SAASC,cAAc,SACnCQ,EAAMvE,KAAOsE,EAAK,GAClBC,EAAMC,MAAQF,EAAK,GACnBlB,EAAKqB,YAAYF,EACrB,IAEIG,EAAAA,GAAAA,KAAajB,kBAA0CA,mBAA2CvD,EAASuD,qBAC1GkB,MAAK,SAACC,GACHtE,EAAauE,SAAS,CAACC,SAAU,UAAWC,SAAU,0CAA2CC,MAAM,GAC3G,IAAG,SAACC,GACA3E,EAAauE,SAAS,CAACC,SAAU,QAASC,SAAU,2BAA4BC,MAAM,GAC1F,IACA3C,EAAMtC,GACNqB,EAAUrB,GACb,wBAAAuD,EAAA4B,OAAA,GAAAnC,EAAA,KACJ,gBA7BkBoC,GAAA,OAAAxC,EAAAyC,MAAA,KAAAC,UAAA,KA+BbC,EAAe,SAACnE,GAClBC,EAAUD,EACd,EAQA,OANAoE,EAAAA,EAAAA,YAAU,WACNnE,EAAUrB,GACVsC,EAAMtC,EACV,GAAG,CAACgB,KAIAyE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,MAAM,QAAQC,OAAO,wBAAuBZ,SAAA,EAC7Ca,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,aAAYf,SAAE,gBAIlCa,EAAAA,EAAAA,KAACG,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACNF,QAAQ,WACRG,MAAQ,OACRrE,UAAQ,GACJO,EAAS,SAAO,IACpB8C,QAAS3C,EAAOtC,KAChBwE,MAASrD,EAAOnB,KAChBkG,SAAY,SAACC,GAAK,OAAKb,GAAYU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI7E,GAAM,IAAEnB,KAAMmG,EAAMC,OAAO5B,QAAO,EAC3E6B,GAAI,CAACX,MAAO,YAEhBE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,aAAaQ,cAAY,EAAAvB,SAC7B,QAD6B5E,EACxCmC,EAAOtC,YAAI,IAAAG,OAAA,EAAXA,EAAaD,WAGlB0F,EAAAA,EAAAA,KAACG,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACNF,QAAQ,WACRG,MAAQ,QACRrE,UAAQ,GACJO,EAAS,UAAQ,IACrB8C,QAAS3C,EAAOrC,MAChBuE,MAASrD,EAAOlB,MAChBiG,SAAY,SAACC,GAAK,OAAKb,GAAYU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI7E,GAAM,IAAElB,MAAOkG,EAAMC,OAAO5B,QAAO,EAC5E6B,GAAI,CAACX,MAAO,YAEhBE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,aAAaQ,cAAY,EAAAvB,SAC5B,QAD4B3E,EACxCkC,EAAOrC,aAAK,IAAAG,OAAA,EAAZA,EAAcF,WAGnBsF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACc,SAAS,WAAUxB,SAAA,EACpBa,EAAAA,EAAAA,KAAA,YAAAI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACIpE,UAAQ,GACJO,EAAS,YAAU,IACvBqC,MAASrD,EAAOjB,QAChBgG,SAAY,SAACC,GAAK,OAAKb,GAAYU,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI7E,GAAM,IAAEjB,QAASiG,EAAMC,OAAO5B,QAAO,EAC9EgC,aAAc,kBAAM1F,GAAiB,EAAK,EAC1C2F,aAAc,kBAAM3F,GAAiB,EAAM,EAC3C4F,QAAS,kBAAMlF,GAAa,EAAK,EACjCmF,OAAQ,kBAAMnF,GAAa,EAAM,EACjCoF,MAAO,CACHC,OAAQ,QACRnB,MAAO,OACPoB,QAAS,WACTC,WAAY,QACZC,YAAa1E,EAAOpC,QAAU,MAAQW,EAAgB,QAAU,qBAChEoG,aAAc3E,EAAOpC,QAAU,MAAQ,qBACvCgH,aAAc,MACdC,OAAQ,YAGhBvB,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACPQ,GAAI,CACAE,SAAU,WACVa,UAAU,mBACVC,IAAK9F,EAAY,IAAM,MACvB+F,KAAM/F,EAAY,OAAS,OAC3BgG,SAAUhG,EAAY,MAAQ,IAC9BiG,SAAUjG,EAAY,OAAS,OAC/BkG,MAAOnF,EAAOpC,QAAU,MAAQqB,EAAY,qBAAuB,qBACnEmG,gBAAiB,QACjBC,WAAY,2BACZC,OAAQ,KACV7C,SACL,kBAMLS,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACAC,MAAM,OACNmC,QAAQ,OACRC,eAAe,gBAAe/C,SAAA,EAE9Ba,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,aAAaQ,cAAY,EAAAvB,SAC1B,QAD0B1E,EACxCiC,EAAOpC,eAAO,IAAAG,OAAA,EAAdA,EAAgBH,WAErB0F,EAAAA,EAAAA,KAACmC,EAAAA,EAAM,CACHjC,QAAQ,UACRkC,QAAS5F,EAAaM,GAAeqC,SACxC,gBAMjB,ECnLA,EAXsB,WAGpB,OACEa,EAAAA,EAAAA,KAACH,EAAAA,EAAG,CAAAV,UACFa,EAAAA,EAAAA,KAACqC,EAAS,KAGhB,C","sources":["components/ContactMe/ContactMe.tsx","pages/ContactMePage.tsx"],"sourcesContent":["// React Libraries\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useLocation } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from 'yup';\r\nimport EmailJs, { EmailJSResponseStatus } from '@emailjs/browser';\r\n\r\n// Material UI Components\r\nimport {\r\n    Box,\r\n    Typography,\r\n    TextField,\r\n    Button,\r\n} from '@mui/material'\r\n\r\n// Context\r\nimport { AlertContext } from '../Context/AlertContext';\r\n\r\n// Interfaces\r\ninterface IFormValues {\r\n    name: string,\r\n    email: string,\r\n    message: string\r\n}\r\n\r\n// Data\r\n\r\nconst defaultValues: IFormValues = {\r\n    name: '',\r\n    email: '',\r\n    message: '',\r\n}\r\n\r\nconst ContactMe = () => {\r\n\r\n    // Context\r\n    const alertContext = useContext(AlertContext)\r\n\r\n    // States\r\n    const [textAreaHover, setTextAreaHover] = useState<boolean>(false)\r\n\r\n    // Navigation\r\n    const location = useLocation()\r\n\r\n    const [values, setValues] = useState<IFormValues>(defaultValues);\r\n    const [isFocused, setIsFocused] = useState(false);\r\n\r\n    // const phoneRegex = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        name: Yup.string().required('Required'),\r\n        email: Yup.string().required('Required')\r\n            .email('Use valid email (e.g: jone.luke@mail.com)'),\r\n        message: Yup.string().required('Required')\r\n            .min(5, 'Message must have a minimum of 50 characters')\r\n            .max(2000, 'Message can\\'t exceed 2000 characters')\r\n        // phoneNumber: Yup.string().matches(phoneRegex, 'styled using caption typography theme in src/dashboardTheme.js'),\r\n        // password: Yup.string().min(4).max(20).required('styled using styled(Typography) on HelperText.jsx'),\r\n        // confirmPassword: Yup\r\n        //   .string()\r\n        //   .oneOf([Yup.ref(\"password\"), undefined], \"Passwords Don't Match\")\r\n        //   .required(),\r\n    })\r\n\r\n    const { register, handleSubmit, reset, formState: {errors} } = useForm({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n    console.log(values)\r\n\r\n    const handleMessage = async (data: IFormValues) => {\r\n\r\n        console.log('handleMessage fire')\r\n        console.log(process.env.EMAILJS_SERVICE_ID?.toString())\r\n        console.log(process.env.EMAILJS_PUBLIC_KEY?.toString())\r\n        console.log(process.env.EMAILJS_TEMPLATE_ID?.toString())\r\n\r\n        const form = document.createElement('form')\r\n        const message = {\r\n            user_name: data.name,\r\n            user_email: data.email,\r\n            user_message: data.message,\r\n        };\r\n        Object.entries(message).forEach(pair => {\r\n            let input = document.createElement('input')\r\n            input.name = pair[0]\r\n            input.value = pair[1]\r\n            form.appendChild(input)\r\n        })\r\n        if(process.env.REACT_APP_EMAILJS_SERVICE_ID !== undefined && process.env.REACT_APP_EMAILJS_TEMPLATE_ID !== undefined){\r\n            EmailJs.send(process.env.REACT_APP_EMAILJS_SERVICE_ID, process.env.REACT_APP_EMAILJS_TEMPLATE_ID, message, process.env.REACT_APP_EMAILJS_PUBLIC_KEY)\r\n            .then((result) => {\r\n                alertContext.setAlert({severity: 'success', children: 'Message has been successfully submitted', open: true})\r\n            }, (error) => {\r\n                alertContext.setAlert({severity: 'error', children: 'Message is not submitted', open: true})\r\n            });\r\n            reset(defaultValues)\r\n            setValues(defaultValues)\r\n        }\r\n    }\r\n\r\n    const handleChange = (values: IFormValues) => {\r\n        setValues(values);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setValues(defaultValues);\r\n        reset(defaultValues);\r\n    }, [location])\r\n\r\n    // JSX\r\n    return (\r\n        <Box width='500px' margin='100px auto 100px auto' >\r\n            <Typography variant='appHeading' >\r\n                Contact Me\r\n            </Typography>\r\n\r\n            <TextField\r\n                variant='outlined'\r\n                label = \"Name\"\r\n                required\r\n                {...register('name')}\r\n                error = {errors.name ? true : false}\r\n                value = {values.name}\r\n                onChange = {(event) => handleChange({ ...values, name: event.target.value})}\r\n                sx={{width: '100%'}}\r\n            />\r\n            <Typography variant='helperText' gutterBottom>\r\n                {errors.name?.message}\r\n            </Typography>\r\n\r\n            <TextField\r\n                variant='outlined'\r\n                label = \"Email\"\r\n                required\r\n                {...register('email')}\r\n                error = {errors.email ? true : false}\r\n                value = {values.email}\r\n                onChange = {(event) => handleChange({ ...values, email: event.target.value})}\r\n                sx={{width: '100%'}}\r\n            />\r\n            <Typography variant='helperText' gutterBottom>\r\n                {errors.email?.message}\r\n            </Typography>\r\n\r\n            <Box position='relative'>\r\n                <textarea\r\n                    required\r\n                    {...register('message')}\r\n                    value = {values.message}\r\n                    onChange = {(event) => handleChange({ ...values, message: event.target.value})}\r\n                    onMouseEnter={() => setTextAreaHover(true)}\r\n                    onMouseLeave={() => setTextAreaHover(false)}\r\n                    onFocus={() => setIsFocused(true)}\r\n                    onBlur={() => setIsFocused(false)}\r\n                    style={{\r\n                        height: '300px',\r\n                        width: '100%',\r\n                        padding: '5px 10px',\r\n                        fontWeight: '400px',\r\n                        borderColor: errors.message ? 'red' : textAreaHover ? 'black' : 'rgba(0, 0, 0, 0.3)',\r\n                        outlineColor: errors.message ? 'red' : 'rgba(25, 118, 210)',\r\n                        borderRadius: '5px',\r\n                        resize: 'none',\r\n                    }}\r\n                />\r\n                <Typography\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        transform: `translateY(-50%)`,\r\n                        top: isFocused ? '0' : '10%',\r\n                        left: isFocused ? '10px' : '15px',\r\n                        paddingX: isFocused ? '5px' : '0',\r\n                        fontSize: isFocused ? '12px' : '16px',\r\n                        color: errors.message ? 'red' : isFocused ? 'rgba(25, 118, 210)' : 'rgba(0, 0, 0, 0.6)',\r\n                        backgroundColor: 'white',\r\n                        transition: 'top 0.2s, font-size 0.2s',\r\n                        zIndex: '5'\r\n                    }}\r\n                >\r\n                    Message *\r\n                </Typography>\r\n\r\n            </Box>\r\n\r\n            <Box\r\n                width='100%'\r\n                display='flex'\r\n                justifyContent='space-between'\r\n            >\r\n                <Typography variant='helperText' gutterBottom>\r\n                    {errors.message?.message}\r\n                </Typography>\r\n                <Button\r\n                    variant='appMain'\r\n                    onClick={handleSubmit(handleMessage)}\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ContactMe\r\n","\r\n// React Libraries\r\nimport React, { useState } from 'react'\r\n\r\nimport test from '../assets/images/image-01.jpg'\r\n\r\n// Material UI Components\r\nimport { Box, Stack } from '@mui/material'\r\n\r\n// App Components\r\nimport ContactMe from '../components/ContactMe/ContactMe'\r\n\r\n// App Functional Component Page\r\nconst ContactMePage = () => {\r\n\r\n  // JSX\r\n  return (\r\n    <Box>\r\n      <ContactMe />\r\n    </Box>\r\n  )\r\n}\r\n\r\n// Exports\r\nexport default ContactMePage\r\n\r\n\r\n"],"names":["defaultValues","name","email","message","_errors$name","_errors$email","_errors$message","alertContext","useContext","AlertContext","_useState","useState","_useState2","_slicedToArray","textAreaHover","setTextAreaHover","location","useLocation","_useState3","_useState4","values","setValues","_useState5","_useState6","isFocused","setIsFocused","validationSchema","Yup","shape","required","min","max","_useForm","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","console","log","handleMessage","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","_process$env$EMAILJS_","_process$env$EMAILJS_2","_process$env$EMAILJS_3","form","wrap","_context","prev","next","process","EMAILJS_SERVICE_ID","toString","EMAILJS_PUBLIC_KEY","EMAILJS_TEMPLATE_ID","document","createElement","user_name","user_email","user_message","Object","entries","forEach","pair","input","value","appendChild","EmailJs","then","result","setAlert","severity","children","open","error","stop","_x","apply","arguments","handleChange","useEffect","_jsxs","Box","width","margin","_jsx","Typography","variant","TextField","_objectSpread","label","onChange","event","target","sx","gutterBottom","position","onMouseEnter","onMouseLeave","onFocus","onBlur","style","height","padding","fontWeight","borderColor","outlineColor","borderRadius","resize","transform","top","left","paddingX","fontSize","color","backgroundColor","transition","zIndex","display","justifyContent","Button","onClick","ContactMe"],"sourceRoot":""}