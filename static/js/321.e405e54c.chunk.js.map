{"version":3,"file":"static/js/321.e405e54c.chunk.js","mappings":"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","sources":["components/ContactMe/ContactMe.tsx","pages/ContactMePage.tsx"],"sourcesContent":["// React Libraries\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useLocation } from 'react-router-dom'\r\nimport { UseFormHandleSubmit, useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from 'yup';\r\nimport EmailJs from '@emailjs/browser';\r\n\r\n// Material UI Components\r\nimport {\r\n    Box,\r\n    Typography,\r\n    TextField,\r\n    Button,\r\n} from '@mui/material'\r\n\r\n// Context\r\nimport { AlertContext } from '../Context/AlertContext';\r\n\r\n// Interfaces\r\ntype FormValues = {\r\n    name: string,\r\n    email: string,\r\n    message: string\r\n}\r\n\r\n// Data\r\nconst defaultValues: FormValues = {\r\n    name: '',\r\n    email: '',\r\n    message: '',\r\n}\r\n\r\nconst ContactMe = () => {\r\n\r\n    // Validation Schema\r\n    const validationSchema = Yup.object().shape({\r\n        name: Yup.string().required('Required'),\r\n        email: Yup.string().required('Required').email('Use valid email (e.g: jone.luke@mail.com)'),\r\n        message: Yup.string().required('Required')\r\n            .min(30, 'Message must have at least 30 characters')\r\n            .max(3000, 'Message must not exceed 3000 characters'),\r\n    })\r\n\r\n    // Context\r\n    const alertContext = useContext(AlertContext)\r\n\r\n    // States\r\n    const [values, setValues] = useState<FormValues>(defaultValues);\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [textAreaHover, setTextAreaHover] = useState<boolean>(false)\r\n\r\n    // Navigation\r\n    const location = useLocation()\r\n\r\n    // Hooks\r\n    const { register, handleSubmit, reset, formState: {errors}, setValue} = useForm({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n    useEffect(() => {\r\n        setValues(defaultValues);\r\n        reset(defaultValues);\r\n    }, [location])\r\n\r\n    // Handlers\r\n    const changeHandler = (values: FormValues) => {\r\n        setValues(values);\r\n        setValue('message', values.message, { shouldValidate: false})\r\n    }\r\n\r\n    const submitHandler = async (data: FormValues) => {\r\n\r\n        console.log('test')\r\n\r\n        let messageDTO = {\r\n            user_name: data.name,\r\n            user_email: data.email,\r\n            user_message: data.message,\r\n        };\r\n        if(process.env.REACT_APP_EMAILJS_SERVICE_ID !== undefined && process.env.REACT_APP_EMAILJS_TEMPLATE_ID !== undefined){\r\n            await EmailJs.send(process.env.REACT_APP_EMAILJS_SERVICE_ID, process.env.REACT_APP_EMAILJS_TEMPLATE_ID, messageDTO, process.env.REACT_APP_EMAILJS_PUBLIC_KEY)\r\n            .then((result) => {\r\n                alertContext.setAlert({severity: 'success', children: 'Message has been successfully submitted', open: true})\r\n                console.log(`Status: ${result.status}, Message: ${result.text}`)\r\n            }, (error) => {\r\n                alertContext.setAlert({severity: 'error', children: 'Message was not submitted', open: true})\r\n                console.log(`Status: ${error.status}, Message: ${error.text}`)\r\n            });\r\n        }\r\n    }\r\n\r\n    // JSX\r\n    return (\r\n        <Box margin='100px auto 100px auto' sx={{ width: {xs: '80%', md: '700px'}}}>\r\n            <Typography variant='appHeading' >\r\n                Contact Me\r\n            </Typography>\r\n\r\n            <TextField\r\n                variant='outlined'\r\n                label = \"Name\"\r\n                required\r\n                {...register('name')}\r\n                error = {errors.name ? true : false}\r\n                value = {values.name}\r\n                onChange = {(event) => changeHandler({ ...values, name: event.target.value})}\r\n                sx={{width: '100%'}}\r\n            />\r\n            <Typography variant='helperText' gutterBottom>\r\n                {errors.name?.message}\r\n            </Typography>\r\n\r\n            <TextField\r\n                variant='outlined'\r\n                label = \"Email\"\r\n                required\r\n                {...register('email')}\r\n                error = {errors.email ? true : false}\r\n                value = {values.email}\r\n                onChange = {(event) => changeHandler({ ...values, email: event.target.value})}\r\n                sx={{width: '100%'}}\r\n            />\r\n            <Typography variant='helperText' gutterBottom>\r\n                {errors.email?.message}\r\n            </Typography>\r\n\r\n            {/* Message TextArea */}\r\n            <Box position='relative'>\r\n                <textarea\r\n                    className='appTextarea'\r\n                    {...register('message')}\r\n                    value = {values.message}\r\n                    onChange = {(event) => changeHandler({ ...values, message: event.target.value})}\r\n                    onMouseEnter={() => setTextAreaHover(true)}\r\n                    onMouseLeave={() => setTextAreaHover(false)}\r\n                    onFocus={() => setIsFocused(true)}\r\n                    onBlur={() => setIsFocused(false)}\r\n                    style={{\r\n                        borderColor: errors.message ? 'red' : textAreaHover ? 'black' : 'rgba(0, 0, 0, 0.3)',\r\n                        outlineColor: errors.message ? 'red' : 'rgba(25, 118, 210)',\r\n                    }}\r\n                />\r\n                <Typography\r\n                    className='appTextarea-label'\r\n                    sx={{\r\n                        top: isFocused || values.message ? '0' : '10%',\r\n                        left: isFocused || values.message ? '10px' : '15px',\r\n                        paddingX: isFocused || values.message ? '5px' : '0',\r\n                        fontSize: isFocused || values.message ? '12px' : '16px',\r\n                        color: errors.message ? 'red' : isFocused ? 'rgba(25, 118, 210)' : 'rgba(0, 0, 0, 0.6)',\r\n                    }}\r\n                >\r\n                    Message *\r\n                </Typography>\r\n            </Box>\r\n\r\n            <Box\r\n                width='100%'\r\n                display='flex'\r\n                justifyContent='space-between'\r\n            >\r\n                <Typography variant='helperText' gutterBottom>\r\n                    {errors.message?.message}\r\n                </Typography>\r\n                <Button\r\n                    variant='appMain'\r\n                    onClick={handleSubmit(submitHandler)}\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ContactMe\r\n","\r\n// React Libraries\r\nimport React, { useState } from 'react'\r\n\r\nimport test from '../assets/images/image-01.jpg'\r\n\r\n// Material UI Components\r\nimport { Box, Stack } from '@mui/material'\r\n\r\n// App Components\r\nimport ContactMe from '../components/ContactMe/ContactMe'\r\n\r\n// App Functional Component Page\r\nconst ContactMePage = () => {\r\n\r\n  // JSX\r\n  return (\r\n    <Box>\r\n      <ContactMe />\r\n    </Box>\r\n  )\r\n}\r\n\r\n// Exports\r\nexport default ContactMePage\r\n\r\n\r\n"],"names":["defaultValues","name","email","message","_errors$name","_errors$email","_errors$message","validationSchema","Yup","shape","required","min","max","alertContext","useContext","AlertContext","_useState","useState","_useState2","_slicedToArray","values","setValues","_useState3","_useState4","isFocused","setIsFocused","_useState5","_useState6","textAreaHover","setTextAreaHover","location","useLocation","_useForm","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","setValue","useEffect","changeHandler","shouldValidate","submitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","messageDTO","wrap","_context","prev","next","console","log","user_name","user_email","user_message","EmailJs","process","then","result","setAlert","severity","children","open","concat","status","text","error","stop","_x","apply","arguments","_jsxs","Box","margin","sx","width","xs","md","_jsx","Typography","variant","TextField","_objectSpread","label","value","onChange","event","target","gutterBottom","position","className","onMouseEnter","onMouseLeave","onFocus","onBlur","style","borderColor","outlineColor","top","left","paddingX","fontSize","color","display","justifyContent","Button","onClick","ContactMe"],"sourceRoot":""}