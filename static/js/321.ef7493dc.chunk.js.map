{"version":3,"file":"static/js/321.ef7493dc.chunk.js","mappings":"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","sources":["components/ContactMe/ContactMe.tsx","pages/ContactMePage.tsx"],"sourcesContent":["// React Libraries\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useLocation } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from 'yup';\r\nimport EmailJs, { EmailJSResponseStatus } from '@emailjs/browser';\r\n\r\n// Material UI Components\r\nimport {\r\n    Box,\r\n    Typography,\r\n    TextField,\r\n    Button,\r\n} from '@mui/material'\r\n\r\n// Context\r\nimport { AlertContext } from '../Context/AlertContext';\r\n\r\n// Interfaces\r\ninterface IFormValues {\r\n    name: string,\r\n    email: string,\r\n    message: string\r\n}\r\n\r\n// Data\r\n\r\nconst defaultValues: IFormValues = {\r\n    name: '',\r\n    email: '',\r\n    message: '',\r\n}\r\n\r\nconst ContactMe = () => {\r\n\r\n    // Context\r\n    const alertContext = useContext(AlertContext)\r\n\r\n    // States\r\n    const [textAreaHover, setTextAreaHover] = useState<boolean>(false)\r\n\r\n    // Navigation\r\n    const location = useLocation()\r\n\r\n    const [values, setValues] = useState<IFormValues>(defaultValues);\r\n\r\n    // const phoneRegex = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        name: Yup.string().required('Required'),\r\n        email: Yup.string().required('Required')\r\n            .email('Use valid email (e.g: jone.luke@mail.com)'),\r\n        message: Yup.string().required('Required')\r\n            .min(5, 'Message must have a minimum of 50 characters')\r\n            .max(2000, 'Message can\\'t exceed 2000 characters')\r\n        // phoneNumber: Yup.string().matches(phoneRegex, 'styled using caption typography theme in src/dashboardTheme.js'),\r\n        // password: Yup.string().min(4).max(20).required('styled using styled(Typography) on HelperText.jsx'),\r\n        // confirmPassword: Yup\r\n        //   .string()\r\n        //   .oneOf([Yup.ref(\"password\"), undefined], \"Passwords Don't Match\")\r\n        //   .required(),\r\n    })\r\n\r\n    const { register, handleSubmit, reset, formState: {errors} } = useForm({\r\n        resolver: yupResolver(validationSchema)\r\n    });\r\n\r\n    console.log(values)\r\n\r\n    const handleMessage = async (data: IFormValues) => {\r\n\r\n        console.log('handleMessage fire')\r\n        console.log(process.env.EMAILJS_SERVICE_ID?.toString())\r\n        console.log(process.env.EMAILJS_PUBLIC_KEY?.toString())\r\n        console.log(process.env.EMAILJS_TEMPLATE_ID?.toString())\r\n\r\n        const form = document.createElement('form')\r\n        const message = {\r\n            user_name: data.name,\r\n            user_email: data.email,\r\n            user_message: data.message,\r\n        };\r\n        Object.entries(message).forEach(pair => {\r\n            let input = document.createElement('input')\r\n            input.name = pair[0]\r\n            input.value = pair[1]\r\n            form.appendChild(input)\r\n        })\r\n        // if(process.env.EMAILJS_SERVICE_ID !== undefined && process.env.EMAILJS_TEMPLATE_ID !== undefined){\r\n            EmailJs.send('service_hu9xj07', 'template_pbb06uz', message, '6ljq8VWi6sCKb7BSK')\r\n            .then((result) => {\r\n                alertContext.setAlert({severity: 'success', children: 'Message has been successfully submitted', open: true})\r\n            }, (error) => {\r\n                alertContext.setAlert({severity: 'error', children: 'Message is not submitted', open: true})\r\n            });\r\n            reset(defaultValues)\r\n            setValues(defaultValues)\r\n        // }\r\n\r\n        // if(process.env.EMAILJS_SERVICE_ID !== undefined && process.env.EMAILJS_TEMPLATE_ID !== undefined){\r\n        //     let response: EmailJSResponseStatus = await EmailJs.send(process.env.EMAILJS_SERVICE_ID, process.env.EMAILJS_TEMPLATE_ID, message, process.env.EMAILJS_PUBLIC_KEY)\r\n        //     console.log(response)\r\n        // }\r\n    }\r\n\r\n    const handleChange = (values: IFormValues) => {\r\n        setValues(values);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setValues(defaultValues);\r\n        reset(defaultValues);\r\n    }, [location])\r\n\r\n    // JSX\r\n    return (\r\n        <Box height='800px'>\r\n            <Box\r\n                width='300px'\r\n                marginX='auto'\r\n                marginTop='150px'\r\n                marginBottom='100px'\r\n            >\r\n                <Typography variant='appHeading' >\r\n                    Contact Me\r\n                </Typography>\r\n\r\n                <TextField\r\n                    variant='outlined'\r\n                    label = \"Name\"\r\n                    required\r\n                    {...register('name')}\r\n                    error = {errors.name ? true : false}\r\n                    value = {values.name}\r\n                    onChange = {(event) => handleChange({ ...values, name: event.target.value})}\r\n                    sx={{width: '300px'}}\r\n                />\r\n                <Typography variant='helperText' gutterBottom>\r\n                    {errors.name?.message}\r\n                </Typography>\r\n\r\n                <TextField\r\n                    variant='outlined'\r\n                    label = \"Email\"\r\n                    required\r\n                    {...register('email')}\r\n                    error = {errors.email ? true : false}\r\n                    value = {values.email}\r\n                    onChange = {(event) => handleChange({ ...values, email: event.target.value})}\r\n                />\r\n                <Typography variant='helperText' gutterBottom>\r\n                    {errors.email?.message}\r\n                </Typography>\r\n\r\n                <textarea\r\n                    required\r\n                    {...register('message')}\r\n                    value = {values.message}\r\n                    onChange = {(event) => handleChange({ ...values, message: event.target.value})}\r\n                    onMouseEnter={() => setTextAreaHover(true)}\r\n                    onMouseLeave={() => setTextAreaHover(false)}\r\n                    style={{\r\n                        height: '300px',\r\n                        width: '500px',\r\n                        padding: '5px 10px',\r\n                        fontWeight: '400px',\r\n                        borderColor: errors.message ? 'red' : textAreaHover ? 'black' : 'rgba(0, 0, 0, 0.3)',\r\n                        outlineColor: errors.message ? 'red' : 'rgba(25, 118, 210)',\r\n                        borderRadius: '5px',\r\n                        resize: 'none',\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    width='500px'\r\n                    display='flex'\r\n                    justifyContent='space-between'\r\n                >\r\n                    <Typography variant='helperText' gutterBottom>\r\n                        {errors.message?.message}\r\n                    </Typography>\r\n                    <Button\r\n                        variant='appMain'\r\n                        onClick={handleSubmit(handleMessage)}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ContactMe\r\n","\r\n// React Libraries\r\nimport React, { useState } from 'react'\r\n\r\nimport test from '../assets/images/image-01.jpg'\r\n\r\n// Material UI Components\r\nimport { Box, Stack } from '@mui/material'\r\n\r\n// App Components\r\nimport ContactMe from '../components/ContactMe/ContactMe'\r\n\r\n// App Functional Component Page\r\nconst ContactMePage = () => {\r\n\r\n  // JSX\r\n  return (\r\n    <Box>\r\n      <ContactMe />\r\n    </Box>\r\n  )\r\n}\r\n\r\n// Exports\r\nexport default ContactMePage\r\n\r\n\r\n"],"names":["defaultValues","name","email","message","_errors$name","_errors$email","_errors$message","alertContext","useContext","AlertContext","_useState","useState","_useState2","_slicedToArray","textAreaHover","setTextAreaHover","location","useLocation","_useState3","_useState4","values","setValues","validationSchema","Yup","shape","required","min","max","_useForm","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","console","log","handleMessage","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","_process$env$EMAILJS_","_process$env$EMAILJS_2","_process$env$EMAILJS_3","form","wrap","_context","prev","next","process","EMAILJS_SERVICE_ID","toString","EMAILJS_PUBLIC_KEY","EMAILJS_TEMPLATE_ID","document","createElement","user_name","user_email","user_message","Object","entries","forEach","pair","input","value","appendChild","EmailJs","then","result","setAlert","severity","children","open","error","stop","_x","apply","arguments","handleChange","useEffect","_jsx","Box","height","_jsxs","width","marginX","marginTop","marginBottom","Typography","variant","TextField","_objectSpread","label","onChange","event","target","sx","gutterBottom","onMouseEnter","onMouseLeave","style","padding","fontWeight","borderColor","outlineColor","borderRadius","resize","display","justifyContent","Button","onClick","ContactMe"],"sourceRoot":""}